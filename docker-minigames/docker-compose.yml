services:
  # MongoDB Container (only active when using local profile)
  mongodb:
    image: mongo:latest
    container_name: docker-quiz-mongodb
    restart: unless-stopped
    profiles: ["local", "local-dev"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_INIT_DB:-docker_quiz_game}
      # Pass environment for init script
      ENVIRONMENT: ${ENVIRONMENT:-production}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Container (only active when using local profile)
  redis:
    image: redis:7.4.2
    container_name: docker-quiz-redis
    restart: unless-stopped
    profiles: ["local", "local-dev"]
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Backend API (works with both local and cloud MongoDB/Redis)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: docker-quiz-backend
    restart: unless-stopped
    environment:
      # MongoDB connection configuration
      - MONGODB_URL=${MONGODB_URL}
      - DB_NAME=${DB_NAME:-docker_quiz_game}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      # Additional MongoDB settings
      - MONGODB_TIMEOUT=${MONGODB_TIMEOUT:-10000}
      - MONGODB_POOL_SIZE=${MONGODB_POOL_SIZE:-10}
      # Redis configuration
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password_123}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_URL=${REDIS_URL}
      # Cache configuration
      - CACHE_TTL=${CACHE_TTL:-3600}
      - QUESTIONS_CACHE_TTL=${QUESTIONS_CACHE_TTL:-7200}
      # Admin configuration
      - ADMIN_API_KEY=${ADMIN_API_KEY:-your-secure-admin-key-here}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - quiz-network
    # Conditional dependencies based on profile
    depends_on:
      mongodb:
        condition: service_healthy
        required: false
      redis:
        condition: service_healthy
        required: false
    profiles:
      - local
      - local-dev
      - cloud
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: docker-quiz-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL:-http://localhost:8000}
      - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-production}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - quiz-network
    profiles:
      - local
      - local-dev
      - cloud
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Networks
networks:
  quiz-network:
    driver: bridge
    name: docker-quiz-network

# Volumes (only used when MongoDB/Redis containers are active)
volumes:
  mongodb_data:
    driver: local
    name: docker-quiz-mongodb-data
  redis_data:
    driver: local
    name: docker-quiz-redis-data
