input {
  beats {
    port => 5044
    codec => "json"
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Add processing timestamp
  mutate {
    add_field => { 
      "[@metadata][processed_at]" => "%{@timestamp}"
      "environment" => "docker-demo"
      "platform" => "microservices"
    }
  }

  # Extract service name from various sources
  if [container][name] {
    mutate {
      add_field => { "service_name" => "%{[container][name]}" }
      add_field => { "container_id" => "%{[container][id]}" }
      add_field => { "container_image" => "%{[container][image]}" }
    }
  } else if [service] {
    mutate {
      add_field => { "service_name" => "%{service}" }
    }
  } else if [fields][service] {
    mutate {
      add_field => { "service_name" => "%{[fields][service]}" }
    }
  }

  # Parse JSON structured logs first
  if [message] and [message] =~ /^\s*\{.*\}\s*$/ {
    json {
      source => "message"
      target => "parsed_json"
      skip_on_invalid_json => true
      add_tag => ["json_parsed"]
    }
    
    # Extract fields from parsed JSON
    if [parsed_json] {
      if [parsed_json][level] {
        mutate { add_field => { "log_level" => "%{[parsed_json][level]}" } }
      }
      if [parsed_json][timestamp] {
        mutate { add_field => { "log_timestamp" => "%{[parsed_json][timestamp]}" } }
      }
      if [parsed_json][service] {
        mutate { add_field => { "service_name" => "%{[parsed_json][service]}" } }
      }
      if [parsed_json][message] {
        mutate { add_field => { "log_message" => "%{[parsed_json][message]}" } }
      }
      if [parsed_json][http_method] {
        mutate { 
          add_field => { 
            "http_method" => "%{[parsed_json][http_method]}"
            "http_endpoint" => "%{[parsed_json][http_endpoint]}"
            "http_status" => "%{[parsed_json][http_status]}"
            "response_time" => "%{[parsed_json][response_time]}"
          }
        }
      }
    }
  }

  # Service-specific log parsing
  if [service_name] {
    if [service_name] =~ /user-service/ {
      # Parse NestJS logs
      grok {
        match => { 
          "message" => "\[%{DATA:context}\]\s+%{INT:pid}\s+-\s+%{TIMESTAMP_ISO8601:log_timestamp}\s+%{LOGLEVEL:log_level}\s+\[%{DATA:logger}\]\s+%{GREEDYDATA:log_message}" 
        }
        tag_on_failure => ["_grokparsefailure_nestjs"]
      }
      
      # Parse HTTP request logs
      if [log_message] {
        grok {
          match => {
            "log_message" => "%{WORD:http_method}\s+%{URIPATH:http_endpoint}\s+%{INT:http_status}\s+%{NUMBER:response_time}ms"
          }
          tag_on_failure => ["_grokparsefailure_http"]
        }
      }
    }
    
    else if [service_name] =~ /todo-service/ {
      # Parse FastAPI/Uvicorn logs
      grok {
        match => { 
          "message" => "%{TIMESTAMP_ISO8601:log_timestamp}\s+-\s+%{DATA:logger}\s+-\s+%{LOGLEVEL:log_level}\s+-\s+%{GREEDYDATA:log_message}" 
        }
        tag_on_failure => ["_grokparsefailure_fastapi"]
      }
      
      # Parse FastAPI access logs
      if [log_message] {
        grok {
          match => {
            "log_message" => "\"%{WORD:http_method}\s+%{URIPATH:http_endpoint}.*?\"\s+%{INT:http_status}\s+%{NUMBER:response_time}"
          }
          tag_on_failure => ["_grokparsefailure_fastapi_access"]
        }
      }
    }
    
    else if [service_name] =~ /kong/ {
      # Parse Kong access logs
      if [message] =~ /^\{.*\}$/ {
        json {
          source => "message"
          target => "kong"
          skip_on_invalid_json => true
          add_tag => ["kong_json"]
        }
        
        if [kong] {
          mutate {
            add_field => { 
              "http_method" => "%{[kong][request][method]}"
              "http_url" => "%{[kong][request][url]}"
              "http_endpoint" => "%{[kong][request][uri]}"
              "response_status" => "%{[kong][response][status]}"
              "response_time" => "%{[kong][latencies][request]}"
              "upstream_response_time" => "%{[kong][latencies][upstream]}"
              "client_ip" => "%{[kong][client_ip]}"
            }
          }
        }
      }
    }
  }

  # Normalize log levels
  if [log_level] {
    mutate {
      uppercase => ["log_level"]
    }
    
    # Map severity
    translate {
      field => "log_level"
      destination => "severity"
      dictionary => {
        "ERROR" => "high"
        "FATAL" => "critical"
        "WARN" => "medium"
        "WARNING" => "medium"
        "INFO" => "low"
        "DEBUG" => "low"
        "TRACE" => "low"
      }
      fallback => "low"
    }
  }

  # Data type conversions
  if [response_time] {
    mutate {
      convert => { "response_time" => "float" }
    }
  }

  if [upstream_response_time] {
    mutate {
      convert => { "upstream_response_time" => "float" }
    }
  }

  if [response_status] or [http_status] {
    mutate {
      convert => { 
        "response_status" => "integer"
        "http_status" => "integer"
      }
    }
  }

  # Parse timestamp
  if [log_timestamp] {
    date {
      match => [ 
        "log_timestamp", 
        "ISO8601", 
        "yyyy-MM-dd HH:mm:ss,SSS",
        "yyyy-MM-dd HH:mm:ss.SSS",
        "dd/MMM/yyyy:HH:mm:ss Z"
      ]
      target => "@timestamp"
      tag_on_failure => ["_dateparsefailure"]
    }
  }

  # Clean up sensitive data
  mutate {
    remove_field => [ 
      "password", "token", "authorization", "cookie", 
      "secret", "key", "credential", "auth", "passwd"
    ]
  }

  # Remove temporary fields
  if "json_parsed" in [tags] {
    mutate {
      remove_field => ["parsed_json"]
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "microservices-logs-%{+YYYY.MM.dd}"
    template_name => "microservices-logs"
    template => "/usr/share/logstash/templates/microservices-template.json"
    template_overwrite => true
    manage_template => true
  }
  
  # Debug output for development
  if [@metadata][debug] {
    stdout { 
      codec => rubydebug {
        metadata => true
      }
    }
  }
}
