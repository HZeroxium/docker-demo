input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
  
  http {
    port => 8080
    codec => json
  }
}

filter {
  # Parse Docker container logs
  if [container][name] {
    mutate {
      add_field => { "service_name" => "%{[container][name]}" }
    }
  }

  # Parse structured logs from services
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "parsed"
    }
  }

  # Parse NestJS logs (User Service)
  if [service_name] == "user-service" {
    grok {
      match => { 
        "message" => "\[%{DATA:context}\] %{INT:pid}  - %{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:level}\s+\[%{DATA:logger}\] %{GREEDYDATA:log_message}" 
      }
      tag_on_failure => ["_grokparsefailure_nestjs"]
    }
  }

  # Parse FastAPI logs (Todo Service)
  if [service_name] == "todo-service" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{DATA:logger} - %{LOGLEVEL:level} - %{GREEDYDATA:log_message}" 
      }
      tag_on_failure => ["_grokparsefailure_fastapi"]
    }
  }

  # Parse Kong logs
  if [service_name] == "kong-gateway" {
    json {
      source => "message"
      target => "kong"
    }
    
    if [kong][request] {
      mutate {
        add_field => { 
          "http_method" => "%{[kong][request][method]}"
          "http_url" => "%{[kong][request][url]}"
          "response_status" => "%{[kong][response][status]}"
          "response_time" => "%{[kong][latencies][request]}"
        }
      }
    }
  }

  # Add common fields
  mutate {
    add_field => { 
      "environment" => "docker-demo"
      "processed_at" => "%{@timestamp}"
    }
  }

  # Convert numeric fields
  if [response_time] {
    mutate {
      convert => { "response_time" => "integer" }
    }
  }

  if [response_status] {
    mutate {
      convert => { "response_status" => "integer" }
    }
  }

  # Add severity field based on log level
  if [level] {
    if [level] in ["ERROR", "error"] {
      mutate { add_field => { "severity" => "high" } }
    } else if [level] in ["WARN", "warn", "WARNING"] {
      mutate { add_field => { "severity" => "medium" } }
    } else {
      mutate { add_field => { "severity" => "low" } }
    }
  }

  # Remove sensitive information
  mutate {
    remove_field => [ "password", "token", "authorization", "cookie" ]
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "microservices-logs-%{+YYYY.MM.dd}"
    template_name => "microservices-template"
    template => "/usr/share/logstash/templates/microservices-template.json"
    template_overwrite => true
  }

  # Debug output (can be removed in production)
  stdout {
    codec => rubydebug {
      metadata => false
    }
  }
}
