input {
  beats {
    port => 5044
  }
}

filter {
  # Parse Docker container logs
  if [container] {
    mutate {
      add_field => { "service_name" => "%{[container][name]}" }
      add_field => { "container_id" => "%{[container][id]}" }
      add_field => { "container_image" => "%{[container][image]}" }
    }
  }

  # Parse JSON logs from microservices
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }

  # Parse todo-service specific logs
  if [service_name] == "todo-service" {
    if [message] =~ /^\{.*\}$/ {
      json {
        source => "message"
        target => "log_data"
      }
      
      # Extract structured fields
      if [log_data] {
        mutate {
          add_field => { "log_level" => "%{[log_data][level]}" }
          add_field => { "service_version" => "%{[log_data][service_version]}" }
          add_field => { "event_type" => "%{[log_data][event_type]}" }
        }
        
        # Extract HTTP request data
        if [log_data][http_method] {
          mutate {
            add_field => { "http_method" => "%{[log_data][http_method]}" }
            add_field => { "http_endpoint" => "%{[log_data][http_endpoint]}" }
            add_field => { "http_status" => "%{[log_data][http_status]}" }
            add_field => { "response_time" => "%{[log_data][response_time]}" }
          }
        }
        
        # Extract database operation data
        if [log_data][database_operation] {
          mutate {
            add_field => { "database_operation" => "%{[log_data][database_operation]}" }
            add_field => { "collection" => "%{[log_data][collection]}" }
          }
        }
        
        # Extract todo operation data
        if [log_data][todo_operation] {
          mutate {
            add_field => { "todo_operation" => "%{[log_data][todo_operation]}" }
            add_field => { "todo_id" => "%{[log_data][todo_id]}" }
            add_field => { "user_id" => "%{[log_data][user_id]}" }
          }
        }
      }
    }
  }

  # Parse user-service specific logs (similar pattern)
  if [service_name] == "user-service" {
    if [message] =~ /^\{.*\}$/ {
      json {
        source => "message"
        target => "user_log_data"
      }
    }
  }

  # Add timestamp parsing
  if [@timestamp] {
    date {
      match => [ "@timestamp", "ISO8601" ]
    }
  }

  # Add geographic and host information
  mutate {
    add_field => { "environment" => "docker-demo" }
    add_field => { "platform" => "microservices" }
  }

  # Convert response_time to float for aggregations
  if [response_time] {
    mutate {
      convert => { "response_time" => "float" }
    }
  }

  # Convert http_status to integer
  if [http_status] {
    mutate {
      convert => { "http_status" => "integer" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "microservices-logs-%{+YYYY.MM.dd}"
    template_name => "microservices"
    template => "/usr/share/logstash/templates/microservices-template.json"
    template_overwrite => true
  }
  
  # Debug output to stdout (remove in production)
  stdout { 
    codec => rubydebug {
      metadata => false
    }
  }
}
  }
}
