syntax = "proto3";

package todo;

// Enhanced Todo message definition with all fields
message Todo {
  string id = 1;
  string title = 2;
  string description = 3;
  string priority = 4;
  bool completed = 5;
  string due_date = 6;
  string user_id = 7;
  string created_at = 8;
  string updated_at = 9;
}

// Empty message for requests with no parameters
message Empty {}

// Request messages
message CreateTodoRequest {
  string title = 1;
  string description = 2;
  string priority = 3;
  string due_date = 4;
  string user_id = 5;
}

message GetTodoRequest {
  string id = 1;
}

message UpdateTodoRequest {
  string id = 1;
  optional string title = 2;
  optional string description = 3;
  optional string priority = 4;
  optional bool completed = 5;
  optional string due_date = 6;
}

message DeleteTodoRequest {
  string id = 1;
}

message ListTodosRequest {
  int32 page = 1;
  int32 limit = 2;
  optional string user_id = 3;
}

message ToggleTodoRequest {
  string id = 1;
}

// Response messages
message TodoResponse {
  Todo todo = 1;
  string message = 2;
  bool success = 3;
}

message TodoList {
  repeated Todo todos = 1;
}

message ListTodosResponse {
  repeated Todo todos = 1;
  int32 total = 2;
  int32 page = 3;
  int32 limit = 4;
}

message DeleteTodoResponse {
  bool success = 1;
  string message = 2;
}

// Enhanced gRPC service definition
service TodoService {
  // Basic CRUD operations
  rpc GetTodos(Empty) returns (TodoList);
  rpc GetTodo(GetTodoRequest) returns (TodoResponse);
  rpc CreateTodo(CreateTodoRequest) returns (TodoResponse);
  rpc UpdateTodo(UpdateTodoRequest) returns (TodoResponse);
  rpc DeleteTodo(DeleteTodoRequest) returns (DeleteTodoResponse);
  
  // Enhanced operations
  rpc ListTodos(ListTodosRequest) returns (ListTodosResponse);
  rpc ToggleTodo(ToggleTodoRequest) returns (TodoResponse);
}
